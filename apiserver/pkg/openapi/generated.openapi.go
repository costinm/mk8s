//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.Echo":       schema_pkg_apis_echo_v1_Echo(ref),
		"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoList":   schema_pkg_apis_echo_v1_EchoList(ref),
		"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoSpec":   schema_pkg_apis_echo_v1_EchoSpec(ref),
		"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoStatus": schema_pkg_apis_echo_v1_EchoStatus(ref),
	}
}

func schema_pkg_apis_echo_v1_Echo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Echo is a test CRD",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the desired state of Echo.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status defines the current state of Echo.\n\n-----kubebuilder:default={conditions: {{type: \"Accepted\", status: \"Unknown\", reason:\"Pending\", message:\"Waiting for controller\", lastTransitionTime: \"1970-01-01T00:00:00Z\"},{type: \"Programmed\", status: \"Unknown\", reason:\"Pending\", message:\"Waiting for controller\", lastTransitionTime: \"1970-01-01T00:00:00Z\"}}}",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoSpec", "github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.EchoStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_echo_v1_EchoList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EchoList contains a list of Echos.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.Echo"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/costinm/mk8s/apiserver/pkg/apis/echo/v1.Echo", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_echo_v1_EchoSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EchoSpec defines the desired state of Echo.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"msg": {
						SchemaProps: spec.SchemaProps{
							Description: "Support: Core",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"msg"},
			},
		},
	}
}

func schema_pkg_apis_echo_v1_EchoStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"msg": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"msg"},
			},
		},
	}
}
